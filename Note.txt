https://getbootstrap.com/docs/4.0/components/forms/
https://getbootstrap.com/docs/4.0/components/forms/#checkboxes-and-radios
https://getbootstrap.com/docs/4.0/components/forms/#form-controls

https://angular.io/api/forms/NgForm
https://putsreq.com/
https://github.com/phstc/putsreq#response-builder
https://valor-software.com/ngx-bootstrap/#/buttons
https://valor-software.com/ngx-bootstrap/#/datepicker
https://valor-software.com/ngx-bootstrap/#/timepicker
https://valor-software.com/ngx-bootstrap/#/rating

https://angular.io/resources
(under community: Catalog of Angular Components & libaries)
https://github.com/brillout/awesome-angular-components

D:\react>ng new  Angular-Forms
? Would you like to add Angular routing? No
? Which stylesheet format would you like to use? CSS

D:\react\Angular-Forms>git remote add origin git@github.com:Annie-Huang/Angular-Forms.git
D:\react\Angular-Forms>git push -u origin master

D:\react\Angular-Forms>ng g c user-settings-form
D:\react\Angular-Forms>npm install --save bootstrap

blur (tab|mouseClick in and out of the field)
======================================
ng-untouched | ng-touched

Ng-untouched and ng-touched, a field starts off with the ng-untouched class,
and when we visit a field, we may or may not modify it,
but at some point we're going to blur that field, blur means lose focus. That could mean Tabbing off of the field or hitting the Post button to cause the field to lose focus.
When that happens, the ng-untouched class is removed, and ng-touched is placed on the field.


unmodified
==============
ng-pristine | ng-dirty

We also have a pair of ng-pristine and ng-dirty. A field's value starts off as pristine, and that means unmodified,
and as soon as you modify that field, ng-pristine is removed and ng-dirty is placed on that field.
So a class of ng-dirty just means that the field has been modified.

validation
================
ng-valid | ng-invalid

if we're using some kind of attribute for a validation, Angular will know about that,
and as long as the field is valid, ng-valid will be a class name on that input field.
If the value is invalid, we get ng-invalid instead.



-----------


<input id="name" name="name" class="form-control" [(ngModel)]="userSettings.name" #classTest>
<h3>{{ classTest.className }}</h3>

For required, it will apply these classes:
ng-untouched ng-pristine ng-invalid

When you tab in and out of the field:
ng-pristine ng-invalid ng-touched

Refresh the page When you tab in and type something:
ng-dirty ng-valid ng-touched

Remove required and refresh the page:
ng-untouched ng-pristine ng-valid

-----------
<input id="name" name="name" class="form-control" [(ngModel)]="userSettings.name" minlength="3" #classTest>
<h3>{{ classTest.className }}</h3>

Initially:
ng-untouched ng-pristine ng-valid	<< don't know why it's ng-valid

Start typing "M"
ng-untouched ng-dirty ng-invalid

Continue to type "ac"
ng-untouched ng-dirty ng-valid

-----------
<input id="name" name="name" class="form-control" [(ngModel)]="userSettings.name" required minlength="3" #classTest>
<h3>{{ classTest.className }}</h3>

Initially:
ng-untouched ng-pristine ng-invalid

------------

What's put into https://putsreq.com/osNqx9elMrKHmaSiXTtQ/inspect, or https://putsreq.com/osNqx9elMrKHmaSiXTtQ:
Success:
var parsedBody = JSON.parse(request.body);
parsedBody.id = '1234';
response.body = parsedBody;

Error:
response.status = 400;
response.body = {errorMessage: 'Some error goes here..'};


400 error: errors in the client side (invalid fields?).
500 error: errors in the server side.
